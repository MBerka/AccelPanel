function AccelPanel( initFileName ) %fig_hdl=
% ACCELPANEL
%-------------------------------------------------------------------------------
% File name   : AccelPanel.m                 
% Generated on: 24-Dec-2014 17:17:53          
% Description :
%-------------------------------------------------------------------------------


% Initialize handles structure
handles = struct();

buildGUI();
set(handles.statusBox, 'String', 'GUI created.');

% Assign function output
fig_hdl = handles.figure1;

if exist('initFileName', 'var')
  loadFile(handles, initFileName);
end

filePathString = get(handles.filePathField, 'String');
if (length(filePathString)>2)&&isempty(get(handles.fileStatisticsText, 'UserData'))
  loadFile(handles, filePathString);
end
  
function buildGUI
% Creates all uicontrols

  %GUI-related variables:
  figWidth = 1100;
  figHeight = 500;
  iconPath = fullfile(matlabroot, 'toolbox','matlab','icons');
  boxMargin = 5; %px
  fieldHeight = 20; %px
  panelHeight = fieldHeight*4;
%   panelRow = fileRow - panelHeight - boxMargin;
  panelRow = 0.78;
  checkWidth = 25; %px
  threeCheckWidth = 3*checkWidth+3.5*boxMargin;
  leftPanelWidth = 0; %Space reserved for future use
  axesPosition = [0.1 0.1 0.8 0.85]; %Inside graph panel
  stdButtonColor = [0.831 0.816 0.784];

		%% Create figure window and panels ----------------------------
    screenSize = get(0,'screensize');
		handles.figure1 = figure( ...
			'Tag', 'figure1', ...
			'Position', [5 screenSize(4)-50-figHeight figWidth figHeight], ...
			'Name', 'AccelPanel', ...
			'MenuBar', 'none', ...
			'NumberTitle', 'off', ...
			'Color', get(0,'DefaultUicontrolBackgroundColor'), ...
      'ResizeFcn', @resizeWindow);

		handles.controls = uipanel( ...
      'Parent', handles.figure1, ...
      'Tag', 'cotrols', ...
      'Units', 'normalized', ...
      'Position', [0 panelRow 1 1-panelRow]);
    set(handles.controls', 'Units', 'pixels');
    controlArea = get(handles.controls', 'Position');
%     set(handles.controls, 'Units', 'normalized');
    
    panelLeft = boxMargin;
    fileRow = controlArea(4) - fieldHeight - boxMargin;
    
		handles.tracePanel = uipanel( ...
			'Parent', handles.controls, ...
			'Tag', 'tracePanel', ...
      'Units', 'pixels', ...
			'Position', [panelLeft boxMargin threeCheckWidth fieldHeight*2], ...
			'Title', 'Traces');
    panelLeft = panelLeft + threeCheckWidth + boxMargin;
    
    medPanelHeight = 0.75*panelHeight;
    
    handles.resultantPanel = uipanel( ...
			'Parent', handles.controls, ...
			'Tag', 'resultantPanel', ...
			'UserData', zeros(1,0), ...
      'Units', 'pixels', ...
			'Position', [panelLeft boxMargin threeCheckWidth medPanelHeight], ...
			'Title', 'Resultant');
    panelLeft = panelLeft + threeCheckWidth + boxMargin;
    
    handles.spectroPanel = uipanel( ...
			'Parent', handles.controls, ...
			'Tag', 'spectroPanel', ...
      'Units', 'pixels', ...
			'Position', [panelLeft boxMargin threeCheckWidth medPanelHeight], ...
			'Title', 'Spectrogram');
    panelLeft = panelLeft + threeCheckWidth + boxMargin;

    handles.timePanel = uipanel( ...
			'Parent', handles.controls, ...
			'Tag', 'timePanel', ...
			'UserData', zeros(1,0),...
      'Units', 'pixels', ...
			'Position', [panelLeft boxMargin 210 panelHeight], ...
			'Title', 'Time axis');
    panelLeft = panelLeft + 210 + boxMargin;
    
		handles.accelPanel = uipanel( ...
			'Parent', handles.controls, ...
			'Tag', 'accelPanel', ...
      'Units', 'pixels', ...
			'Position', [panelLeft boxMargin 80 panelHeight], ...
			'Title', 'Acceleration');
    
    panelLeft = panelLeft + 80 + boxMargin;
    handles.selectDataPanel = uipanel( ...
      'Parent', handles.controls, ...
      'Tag', 'selectDataPanel', ...
      'Units', 'pixels', ...
      'Position', [panelLeft boxMargin 300 panelHeight], ...
      'Title', 'Select and analyze data');
    
    handles.graphPanel = uipanel(...
      'Parent', handles.figure1, ...
      'Tag', 'graphPanel', ...
      'Units', 'pixels', ...
      'Position', ...
        [leftPanelWidth 0 figWidth-leftPanelWidth figHeight-controlArea(4)]);

		%% Axes and lines------------------------------
		handles.traceAxes = axes( ...
			'Parent', handles.graphPanel, ...
			'Tag', 'traceAxes', ...
			'Units', 'normalized', ...
			'Position', axesPosition, ...
      'YAxisLocation', 'left', ...
      'Color', 'none');
    set(handles.tracePanel, 'UserData', handles.traceAxes);
    
    handles.spectroAxes = axes( ...
			'Parent', handles.graphPanel, ...
			'Tag', 'spectroAxes', ...
			'Units', 'normalized', ...
			'Position', axesPosition, ...
      'YAxisLocation', 'right');
    set(handles.spectroPanel, 'UserData', handles.spectroAxes);
    linkaxes([handles.traceAxes handles.spectroAxes], 'x');
		
    %Lines may be removed
%     traces = {'trace1' [0 0 1] '1'; 'trace2' [1 0 0] '2';
%       'trace3' [0 0.75 0.75] '3';'absTrace' [0 0.5 0] '||1, 2, 3||' };
    traces = {'trace1' [0 0 1] '1'; 'trace2' [0 1 0] '2';
      'trace3' [.75 0.75 0] '3';'absTrace' [0 0.5 0] '||1, 2, 3||' };
    
    for trInd=1:length(traces)
      handles.(traces{trInd,1}) = line( ...
        'Color', traces{trInd,2}, ...
        'DisplayName', traces{trInd,3}, ...
        'LineStyle', '-', ...
        'LineWidth', 0.5, ...
        'Marker', 'none', ...
        'Parent', handles.traceAxes, ...
        'Tag', traces{trInd, 1}, ...
        'XData', zeros(1,0),...
        'YData', zeros(1,0),...
        'ZData', zeros(1,0));
    end
    
    handles.detectLine = line( ...
      'Color', [1 0.6 0], ...
      'DisplayName', 'Detected', ...
      'LineStyle', '-', ...
      'LineWidth', 10, ...
      'Marker', 'none', ...
      'Parent', handles.traceAxes, ...
      'Tag', 'detectLine', ...
      'Visible', 'off', ...
      'XData', zeros(1,0),...
      'YData', zeros(1,0),...
      'ZData', zeros(1,0));

    %% Checkbox panels
    itemLeft = 0.25*boxMargin;
    for trInd = 1:3
      handles.([traces{trInd,1} 'Box']) = uicontrol( ...
        'Parent', handles.tracePanel, ...
        'Tag', [traces{trInd,1} 'Box'], ...
        'UserData', handles.(traces{trInd,1}), ...
        'Style', 'checkbox', ...
        'Position', [itemLeft boxMargin checkWidth fieldHeight], ...
        'String', traces{trInd, 3}, ...
        'Value', 1, ...
        'Callback', @traceVisibility);
      itemLeft = itemLeft + checkWidth + boxMargin;
    end
    
    showBoxArea = [1 1.65 14 1.77];

		handles.showSpectro = uicontrol( ...
			'Parent', handles.spectroPanel, ...
			'Tag', 'showSpectro', ...
			'Style', 'checkbox', ...
			'Units', 'characters', ...
			'Position', showBoxArea, ...
			'String', 'Show for', ...
			'Callback', @showSpectroCallback);

    itemLeft = 0.25*boxMargin;
    for trInd = 1:3
      handles.(['spectro' num2str(trInd) 'Box']) = uicontrol( ...
        'Parent', handles.spectroPanel, ...
        'Tag', ['spectro' num2str(trInd) 'Box'], ...
        'Style', 'checkbox', ...
        'Position', [itemLeft boxMargin checkWidth fieldHeight], ...
        'String', traces{trInd, 3}, ...
        'Value', 1, ...
        'Callback', @spectroPartCallback, ...
        'Enable', 'off');
      itemLeft = itemLeft + checkWidth + boxMargin;
    end
    
    itemLeft = 0.25*boxMargin;
    for trInd = 1:3
      handles.(['resultant' num2str(trInd) 'Box']) = uicontrol( ...
        'Parent', handles.resultantPanel, ...
        'Tag', ['resultant' num2str(trInd) 'Box'], ...
        'Style', 'checkbox', ...
        'Position', [itemLeft boxMargin checkWidth fieldHeight], ...
        'String', traces{trInd, 3}, ...
        'Value', 1, ...
        'Callback', @resultantPartCallback, ...
        'Enable', 'off');
      itemLeft = itemLeft + checkWidth + boxMargin;
    end

		handles.showResultant = uicontrol( ...
			'Parent', handles.resultantPanel, ...
			'Tag', 'showResultant', ...
			'UserData', handles.absTrace, ...
			'Style', 'checkbox', ...
			'Units', 'characters', ...
			'Position', showBoxArea, ...
			'String', 'Show for', ...
			'Callback', @showResultantCallback);
    
    %% Time axis panel ---------------------------------------
    
    % Start bottom row: two buttons
    itemLeft = boxMargin;
    handles.manualRangeButton = uicontrol( ...
			'Parent', handles.timePanel, ...
			'Tag', 'manualRangeButton', ...
			'Style', 'pushbutton', ...
			'Position', [itemLeft boxMargin 85 fieldHeight], ...
			'BackgroundColor', stdButtonColor, ...
			'String', 'Visual selection', ...
			'TooltipString', 'Click once at each of two boundary times', ...
			'CData', zeros(1,0), ...
			'Callback', @manualRangeButtonCallback);
    
    itemLeft = itemLeft + 85 + boxMargin;

    handles.noteButton = uicontrol( ...
			'Parent', handles.timePanel, ...
			'Tag', 'fullRangeButton', ...
			'UserData', zeros(1,0), ...
			'Style', 'pushbutton', ...
			'Position', [itemLeft boxMargin 50 fieldHeight], ...
			'BackgroundColor', stdButtonColor, ...
			'String', 'Note', ...
			'TooltipString', 'Annotate on the graph', ...
			'CData', zeros(1,0), ...
			'Callback', @noteButtonCallback);
    
    %Above that: two fields and a select list, each with a label
    
   tParams = {{'startField' 'edit' 40 '0' 'From:' ...
      'Beginning of displayed time segment' @startFieldCallback}, ...
      {'endField' 'edit' 40 'Inf' 'To:' 'End of displayed time segment' ...
      @endFieldCallback}, {'tUnitList' 'popupmenu' 65 ...
      {'samples','seconds','minutes','hours'} 'Units:' ['Units in which ' ...
      'the time axis is displayed and the time segment is calculated'] ...
      @tUnitListCallback}, {'plotFreqField' 'edit' 45 '1' 'Decimate' ...
      ['Reduce density of samples used in plotting and analysis by this '...
      'factor'] @plotFreqFieldCallback}};
    itemLeft = boxMargin;
    timeRow2 = fieldHeight+2*boxMargin;
    timeLabelBottom = 2*(boxMargin+fieldHeight);
    for panInd = 1:4
      if panInd == 4
        itemLeft = itemLeft + boxMargin;
      end
      handles.(tParams{panInd}{1}) = uicontrol( ...
        'Parent', handles.timePanel, ...
        'Tag', tParams{panInd}{1}, ...
        'Style', tParams{panInd}{2}, ...
        'Position', [itemLeft timeRow2 tParams{panInd}{3} fieldHeight], ...
        'BackgroundColor', [1 1 1], ...
        'String', tParams{panInd}{4}, ...
        'TooltipString', tParams{panInd}{6}, ...
        'Callback', tParams{panInd}{7});
      
      handles.(sprintf('text%d', panInd)) = uicontrol( ...
        'Parent', handles.timePanel, ...
        'Style', 'text', ...
        'Position', [itemLeft timeLabelBottom tParams{panInd}{3} 0.6*fieldHeight], ...
        'HorizontalAlignment', 'left', ...
        'String', tParams{panInd}{5});
      itemLeft = itemLeft + tParams{panInd}{3};
    end
    timePos = get(handles.timePanel,'Position');
    timePos(3) = itemLeft + boxMargin;
    set(handles.timePanel,'Position', get(handles.timePanel,'Position'));
   
    %% Acceleration axis panel ----------------------------
		handles.text10 = uicontrol( ...
			'Parent', handles.accelPanel, ...
			'Style', 'text', ...
			'Units', 'pixels', ...
			'Position', [boxMargin boxMargin+2*fieldHeight 65 fieldHeight], ...
      'HorizontalAlignment', 'left', ...
			'String', 'Units');

% 			'TooltipString', ['Maximal acceleration mesurable in one axes. ' ... 
%         'Affects interpretation of dimensionless units recorded by accelerometer.']

		handles.accelUnitList = uicontrol( ...
			'Parent', handles.accelPanel, ...
			'Tag', 'accelUnitList', ...
			'UserData', zeros(1,0), ...
			'Style', 'popupmenu', ...
			'Units', 'pixels', ...
			'Position', [boxMargin fieldHeight+2*boxMargin 65 fieldHeight], ...
			'BackgroundColor', [1 1 1], ...
			'String', {'none','G','m/s^2'}, ...
			'TooltipString', 'Acceleration units', ...
			'Callback', @accelUnitCallback);

    handles.analyzeButton = uicontrol( ...
      'Parent', handles.accelPanel, ...
      'Tag', 'accelFilterButton', ...
      'Position', [boxMargin boxMargin 64 fieldHeight], ...
      'BackgroundColor', stdButtonColor, ...
      'String', 'Filter', ...
      'TooltipString', 'Filter accelerometer noise', ...
      'Callback', @filterButtonCallback);
    
    %% Selection panel
    
    handles.selectStatsText = uicontrol( ...
      'Parent', handles.selectDataPanel, ...
			'Style', 'text', ...
      'HorizontalAlignment', 'left', ...
			'Position', [boxMargin boxMargin+fieldHeight 190 fieldHeight*2], ...
			'String', '');
    
    itemLeft = 0.25*boxMargin;
    for trInd = 1:3
      handles.(['select' num2str(trInd) 'Box']) = uicontrol( ...
        'Parent', handles.selectDataPanel, ...
        'Tag', ['select' num2str(trInd) 'Box'], ...
        'Style', 'checkbox', ...
        'Position', [itemLeft boxMargin checkWidth fieldHeight], ...
        'String', traces{trInd, 3}, ...
        'Value', 1, ...
        'Callback', @selectPartCallback); %Modify for auto-update
      itemLeft = itemLeft + checkWidth + boxMargin;
    end  
    
    handles.selectDataButton = uicontrol( ...
      'Parent', handles.selectDataPanel, ...
      'Tag', 'selectDataButton', ...
      'Position', [itemLeft boxMargin 65 fieldHeight], ...
      'BackgroundColor', stdButtonColor, ...
      'String', 'Select data', ...
      'Callback', @selectDataButtonCallback);
    
    itemLeft = itemLeft + 65 + boxMargin;
    
    handles.analyzeButton = uicontrol( ...
      'Parent', handles.selectDataPanel, ...
      'Tag', 'analyzeButton', ...
      'Position', [itemLeft boxMargin 50 fieldHeight], ...
      'BackgroundColor', stdButtonColor, ...
      'String', 'Analyze', ...
      'Callback', @analyzeButtonCallback);
    
    %% File management area -------------------------------------
    
    fileButtonWidth = 70;
    boxLeft = controlArea(3) - fileButtonWidth - boxMargin;

		handles.refreshViewButton = uicontrol( ...
			'Parent', handles.controls, ...
			'Tag', 'refreshViewButon', ...
			'UserData', zeros(1,0), ...
			'Style', 'pushbutton', ...
			'Position', [boxLeft fileRow fileButtonWidth fieldHeight], ...
			'BackgroundColor', stdButtonColor, ...
			'String', 'Refresh view', ...
			'Callback', @refreshViewButtonCallback);
    
    boxLeft = boxLeft - fileButtonWidth - boxMargin;
    
    handles.selectFileButton = uicontrol( ...
			'Parent', handles.controls, ...
			'Tag', 'selectFileButton', ...
			'UserData', zeros(1,0), ...
			'Style', 'pushbutton', ...
			'Position', [boxLeft fileRow fileButtonWidth fieldHeight], ...
			'BackgroundColor', stdButtonColor, ...
			'String', 'Select file', ...
			'CData', zeros(1,0), ...
			'Callback', @selectFileButtonCallback);
    
    handles.filePathField = uicontrol( ...
			'Parent', handles.controls, ...
			'Tag', 'filePathField', ...
			'UserData', zeros(1,0), ...
			'Style', 'edit', ...
			'Position', [boxMargin fileRow boxLeft-boxMargin fieldHeight], ...
			'BackgroundColor', [1 1 1], ...
			'String', '', ...
			'HorizontalAlignment', 'left', ...
			'Callback', @filePathFieldCallback);
    
    handles.fileStatisticsText = uicontrol( ...
			'Parent', handles.controls, ...
			'Tag', 'fileStatisticsText', ...
			'Style', 'text', ...
			'Position', [boxMargin fileRow-2*fieldHeight threeCheckWidth 2*fieldHeight], ...
			'String', '____ s, ____ KiB, ____ samples/s', ...
			'HorizontalAlignment', 'left');
    
    handles.statusBox = uicontrol( ...
      'Parent', handles.controls, ...
      'Tag', 'statusBox', ...
      'Style', 'edit', ...
      'Enable', 'off', ...
      'Position', [threeCheckWidth+2*boxMargin fileRow-fieldHeight ...
        2*threeCheckWidth+boxMargin fieldHeight], ...
      'String', 'Status', ...
      'TooltipString', 'Status messages');
    
		%% Toolbar and icons-------------------------------------
		handles.icons = uitoolbar( ...
			'Parent', handles.figure1, ...
			'Tag', 'icons');
    
    iconData = {{'\file_open.png','openIcon', 'Load file',...
      @openIconClickedCallback,false}, ...
      {'\file_save.png','saveIcon','Save file',...
      @saveIconClickedCallback,false},...
      {'\tool_plot_linked.png','splitMergeIcon', 'Split/merge files',...
      @splitMergeClickedCallback, false},...
      {'\tool_pushpin.png','saveSettingsIcon', 'Save settings',...
      @saveSettingsCallback, false}, ...
      {'\tool_zoom_in.png','zoomInIcon','Zoom in',...
      @zoomInIconClickedCallback,true},...
      {'\tool_zoom_out.png','zoomOutIcon','Zoom out',...
      @zoomOutIconClickedCallback,true},...
      {'\tool_hand.png','panIcon','Pan',...
      @panIconClickedCallback,true},...
      {'\tool_data_cursor.png','dataCursorIcon','Data cursor',...
      @cursorIconClickedCallback,true},...
      {'\tool_legend.png','legendIcon','Legend',...
      @legendIconClickedCallback, true},...
      {'\tool_colorbar.png', 'colorbarIcon', 'Colorbar (spectrogram)',...
      @colorbarIconClickedCallback, true}};
    %       {'\tool_data_brush.png', 'brushIcon','Data brush', ...
%       @brushIconClickedCallback, true},...
    
    for iconInd = 1:length(iconData)
      cdata = double(imread([iconPath iconData{iconInd}{1}]));
      cdata(cdata(:,:,1)+cdata(:,:,2)+cdata(:,:,3)==0)=NaN;
      
      if iconData{iconInd}{5}
        handles.(iconData{iconInd}{2}) = uitoggletool( ...
          'Parent', handles.icons, ...
          'Tag', iconData{iconInd}{2}, ...
          'TooltipString', iconData{iconInd}{3}, ...
          'CData', cdata/max(max(max(cdata))), ...
          'ClickedCallback', iconData{iconInd}{4});
      else
        handles.(iconData{iconInd}{2}) = uipushtool( ...
          'Parent', handles.icons, ...
          'Tag', iconData{iconInd}{2}, ...
          'TooltipString', iconData{iconInd}{3}, ...
          'CData', cdata/max(max(max(cdata))), ...
          'ClickedCallback', iconData{iconInd}{4});
      end
    end
    set(handles.legendIcon, 'State', 'on'); %Show legend by default
    set(handles.zoomInIcon, 'Separator', 'on'); %Groups of related icons
    set(handles.legendIcon, 'Separator', 'on');

    % GIF: Convert white pixels into a transparent background
% map(find(map(:,1)+map(:,2)+map(:,3)==3)) = NaN;
% openIcon = ind2rgb(cdata,map); % Convert into 3D RGB-space

  enableComponents(handles, false);

end	

%% Button Callbacks
  function filterButtonCallback(hObject, eventdata) %#ok<INUSD>
    filterData(handles);
  end
  
	function selectFileButtonCallback(hObject,eventdata) %#ok<INUSD>
    loadFile(handles);
%     guidata(hObject, handles);
  end

  function selectDataButtonCallback(hObject,eventdata) %#ok<INUSD>
%     tRange = get(handles.selectDataPanel, 'UserData');
    tRange = selectData(handles);
    if tRange(1)||tRange(2);
      set(handles.selectDataPanel, 'UserData', tRange);
    end
  end

	function manualRangeButtonCallback(hObject,eventdata) %#ok<INUSD>
    if get(handles.tUnitList, 'Value')
      % For visual selection
%       selectedX = selectData(handles, 1, [0 1], true);
      selectedX = selectData(handles);
      set(handles.startField, 'String', num2str(selectedX(1)));
      set(handles.endField, 'String', num2str(selectedX(end)));
    end
	end

% 	function fullRangeButtonCallback(hObject,eventdata) %#ok<INUSD>
%     set(handles.startField, 'String', '0');
% %     time = get(handles.accelPanel,'UserData'); %0-Inf is consistent
%     set(handles.endField, 'String', 'Inf');
%   end

	function refreshViewButtonCallback(hObject,eventdata) %#ok<INUSD>
    startTime = str2double(get(handles.startField,'String'));
    endTime = str2double(get(handles.endField,'String'));
    
    timeCoefficient = getUnitCoefficient(handles, 'time');;
    
    decimateFactor = floor(str2double(get(handles.plotFreqField,'String')));
    time = decimate(get(handles.timePanel, 'UserData'), decimateFactor); 
    %Select data sample range and density
    selectedData = logical((time>startTime*timeCoefficient).* ...
      (time<endTime*timeCoefficient));
    
    denseSamples = double(get(handles.accelPanel, 'UserData'));
    samples = zeros(ceil(length(denseSamples)/decimateFactor), 3);
    for counter=1:3
      samples(:, counter) = decimate(denseSamples(:, counter), decimateFactor);
    end
    displayData(samples(selectedData, :), time(selectedData, 1), handles);
    colorbarIconClickedCallback();
    legendIconClickedCallback();
  end

  function analyzeButtonCallback(hObject,eventdata) %#ok<INUSD>
    tRange = get(handles.selectDataPanel, 'UserData');
    if length(tRange)~=2
      tRange = selectData(handles);
    elseif tRange(1) == tRange(2)
      tRange = selectData(handles);
    else
      tRange = selectData(handles, 0, tRange);
    end
    detection(handles, tRange);
  end

  function noteButtonCallback(hObject,eventdata) %#ok<INUSD>
    annotateGraph(handles, 'add');
  end

 %% Checkbox callbacks-----------------------------------------------------

	function showSpectroCallback(hObject,eventdata) %#ok<INUSD>
    boxRefs = {'spectro1Box','spectro2Box','spectro3Box'};
    if get(handles.showSpectro, 'Value'), state = 'on';
    else state = 'off';
    end
    set(get(handles.showSpectro,'UserData'),'Visible',state);
    for boxCounter = 1:3
      set(handles.(boxRefs{boxCounter}), 'Enable', state);
    end
    set(handles.statusBox, 'String', ['Spectrogram ' state]);
  end

	function spectroPartCallback(hObject,eventdata) %#ok<INUSD>
    set(handles.statusBox, 'String', 'Refresh to update spectrogram');
  end

	function showResultantCallback(hObject,eventdata) %#ok<INUSD>
    boxRefs = {'resultant1Box','resultant2Box','resultant3Box'};
    if get(handles.showResultant, 'Value')
      state = 'on';
    else
      state = 'off';
    end
    set(get(handles.showResultant,'UserData'),'Visible',state);
    for boxCounter = 1:3
      set(handles.(boxRefs{boxCounter}), 'Enable', state);
    end
    legendIconClickedCallback(); %Add resultant to or remove from legend
    set(handles.statusBox, 'String', ['Resultant ' state]);
  end

	function resultantPartCallback(hObject,eventdata) %#ok<INUSD>
    set(handles.statusBox, 'String', 'Refresh to update resultant');
	end

  function traceVisibility(hObject, eventdata) %#ok<INUSD>
    %traceButtonCallback Shows/hides traces when a trace checkbox is
    %checked/unchecked
    thisTrace = get(hObject, 'UserData');
    if thisTrace
      if get(hObject, 'Value')
        if strcmp(get(thisTrace, 'Visible'), 'off')
          set(thisTrace,'Visible','on');
        end
        set(handles.statusBox, 'String', 'Trace visible');
      else
        if strcmp(get(thisTrace, 'Visible'), 'on')
          set(thisTrace,'Visible','off');
        end
        set(handles.statusBox, 'String', 'Trace hidden');
      end
    end
    legendIconClickedCallback(); %Update traces in legend
  end

  function selectPartCallback (hObject, eventdata) %#ok<INUSD>
    tRange = get(handles.selectDataPanel, 'UserData');
    selectData(handles, 0, tRange);
    set(handles.selectDataPanel, 'UserData', tRange);
  end

%% Field callbacks---------------------------------------------------------
	function filePathFieldCallback(hObject,eventdata) %#ok<INUSD>

  end

	function startFieldCallback(hObject,eventdata) %#ok<INUSD>

  end

	function endFieldCallback(hObject,eventdata) %#ok<INUSD>

  end

	function plotFreqFieldCallback(hObject,eventdata) %#ok<INUSD>

  end

	function sampleDensityCallback(hObject,eventdata) %#ok<INUSD>

  end

	function tUnitListCallback(hObject,eventdata) %#ok<INUSD>
    
  end

	function accelUnitCallback(hObject,eventdata) %#ok<INUSD>
    set(handles.statusBox, 'String', 'Acceleration unit changed; refresh');
  end

%% Icon callbacks-----------------------------------------------------------
	function openIconClickedCallback(hObject,eventdata) %#ok<INUSD>
    loadFile(handles);
	end

	function saveIconClickedCallback(hObject,eventdata) %#ok<INUSD>
    %Retrieve path of current file source:
%     pathToFile = get(handles.filePathField, 'UserData');    
    
    % pathToFile
    [fileName, pathToFile] = uiputfile({'*.mat', 'Processed data file'}, ...
      'Enter savefile name');
    if (length(fileName)<2)||(length(pathToFile)<2)
      return;
    end
    
    set(handles.statusBox, 'String', 'Saving time-sample data');
    timeData = get(handles.timePanel, 'UserData'); %#ok<NASGU>
    sampleData = get(handles.accelPanel, 'UserData'); %#ok<NASGU>
    annotationData = get(handles.noteButton, 'UserData');
    if isempty(annotationData)
      save([pathToFile fileName], 'timeData', 'sampleData');
    else
      save([pathToFile fileName], 'timeData', 'sampleData', 'annotationData');
    end
    set(handles.statusBox, 'String', 'Time-sample data saved to file');
  end

  function splitMergeClickedCallback(hObject, eventdata) %#ok<INUSD>
    mergeFiles(handles);
  end

  function saveSettingsCallback(hObject, eventdata) %#ok<INUSD>
    [fileName, pathToFile, settingsMode] = uiputfile({'*.mat', ...
      'Control settings (.mat)'; '*.mat', 'Full figure data (.mat)'}, ...
      'Enter savefile name');
    if (length(fileName)<2)||(settingsMode==0)
      set(handles.statusBox, 'String', 'Settings not saved');
      return;
    end
    saveFilePath = [pathToFile fileName];
    [~,~,ext] = fileparts(saveFilePath);
    if settingsMode==2 %Save everything
      settingsStruct = getRestoreSettings(handles, true); %#ok<NASGU>
    else
      settingsStruct = getRestoreSettings(handles); %#ok<NASGU>
    end
    save(saveFilePath, 'settingsStruct');
    set(handles.statusBox, 'String', 'Saved current settings');
  end

	function zoomInIconClickedCallback(hObject,eventdata) %#ok<INUSD>
    set([handles.zoomOutIcon handles.panIcon ...
      handles.dataCursorIcon], 'State', 'off');

    if strcmp(get(handles.zoomInIcon,'State'),'on');
      zoomRef = zoom;
      set(zoomRef,'Direction','in');
      set(zoomRef,'Enable','on');
    else
      zoom off;
    end
	end

	function zoomOutIconClickedCallback(hObject,eventdata) %#ok<INUSD>
    set([handles.zoomInIcon handles.panIcon ...
      handles.dataCursorIcon], 'State', 'off');
    if strcmp(get(handles.zoomOutIcon,'State'),'on');
      zoomRef = zoom;
      set(zoomRef,'Direction','out')
      set(zoomRef,'Enable','on');
    else
      zoom off;
    end
	end

	function panIconClickedCallback(hObject,eventdata) %#ok<INUSD>
    set([handles.zoomOutIcon handles.zoomInIcon ...
      handles.dataCursorIcon], 'State', 'off');
    if strcmp(get(handles.panIcon,'State'),'on'), pan on;
    else pan off;
    end
	end

	function cursorIconClickedCallback(hObject,eventdata) %#ok<INUSD>
    set([handles.zoomOutIcon handles.zoomInIcon ...
      handles.panIcon], 'State', 'off');
    if strcmp(get(handles.dataCursorIcon,'State'),'on'), datacursormode on;
    else datacursormode off;
    end
  end

%   function brushIconClickedCallback(hObject,eventdata) %#ok<INUSD>
%   end

	function legendIconClickedCallback(hObject,eventdata) %#ok<INUSD>
    if strcmp(get(handles.legendIcon,'State'),'on')
      traceHandles = [handles.trace1Box handles.trace2Box handles.trace3Box ...
      handles.showResultant];
      selectedHandles = traceHandles(cell2mat(get(traceHandles, 'Value'))==1);

      if length(selectedHandles)<1
        legend('off');
      else
        if length(selectedHandles)>1
          selectedTraces = cell2mat(get(selectedHandles, 'UserData'));
        else
          selectedTraces = get(selectedHandles, 'UserData');
        end
        legend(selectedTraces, get(selectedTraces, 'DisplayName'), ...
          'Location', 'Best');
      end
    else
      legend('off');
    end
	end

	function colorbarIconClickedCallback(hObject,eventdata) %#ok<INUSD>
    %Toggles the display of the (spectrogram) frequency colorbar to the 
    %left of the graph
    if strcmp(get(handles.colorbarIcon,'State'),'on')
      %Show colorbar to left, by the frequency axis
      colorbar('peer', handles.spectroAxes, 'WestOutside'); %Attach to 
       %the axis with the spectrogram, adjust other later
%       colorbar('WestOutside'); %Covers axis text
    else
      colorbar('off', 'peer', handles.spectroAxes); %Hide from that axis
    end
    
    % Colorbar squeezes spectroAxes; adjust traceAxes
    set(handles.traceAxes, 'Position', get(handles.spectroAxes, 'Position'));
  end

%% Other
  function resizeWindow(hObject,eventdata) %#ok<INUSD>
    newFigArea = get(handles.figure1, 'Position');
    figWidth = newFigArea(3);
    figHeight = newFigArea(4);
    controlArea = get(handles.controls, 'Position');
    cHeight = controlArea(4);
    graphArea = get(handles.graphPanel, 'Position');
    set(handles.controls, 'Position', [0 figHeight-cHeight figWidth cHeight]);
    set(handles.graphPanel, 'Position', ...
      [graphArea(1) 0 figWidth-graphArea(1) figHeight-cHeight]);
    if isfield(handles, 'selectFileButton')
      selectFileButtonArea = get(handles.selectFileButton, 'Position');
      refreshViewButtonArea = get(handles.refreshViewButton, 'Position');
      filePathArea = get(handles.filePathField, 'Position');
      fileButtonShift = refreshViewButtonArea(1) - selectFileButtonArea(1);
      refreshViewButtonArea(1) = figWidth - fileButtonShift;
      selectFileButtonArea(1) = refreshViewButtonArea(1) - fileButtonShift;
      set(handles.refreshViewButton, 'Position', refreshViewButtonArea);
      set(handles.selectFileButton, 'Position', selectFileButtonArea);
      filePathArea(3) = selectFileButtonArea(1)-5;
      set(handles.filePathField, 'Position', filePathArea);
    end
    
  end

end

% h = waitbar(x,'message') 
